import builtins from 'builtin-modules';
import child_process from 'child_process';
import esbuild from 'esbuild';
import fs from 'fs';
import process from 'process';


const prod = (process.argv[2] === "production");

let runScriptPlugin = {
	name: 'run-script',
	setup(build) {
		build.onEnd(result => {
			if (result.errors.length > 0) {
				return
			}
			const scriptName = 'sync-plugin.sh'
			if (!fs.existsSync(scriptName)) {
				return
			}
			console.log(`run ${scriptName}`);
			child_process.exec(`bash ${scriptName}`, (err, stdout, stderr) => {
				if (err) {
					console.error(`run ${scriptName} error:`, err, stdout, stderr)
				}
			})
		})
	},
}


const context = await esbuild.context({
	banner: {
		js: '/* THIS IS A GENERATED/BUNDLED FILE BY ESBUILD */',
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir: "build",
	plugins: [runScriptPlugin],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
